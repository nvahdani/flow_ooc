---
title: "Meta-analysis using data from this study and from GSE158081"
author: Negar Vahdani
date: June, 2024
format:
  pdf:
    toc: true
    toc_depth: 2
    number-sections: true
    fig_width: 10
    fig_height: 10
---

# Clean Memory, set working directory and load libraries
```{r}
##Clear Memory and set the working directory
#| label: load_libraries
#| echo: true
#| results: 'hide'
#| message: false
#| warning: false
rm(list=ls())
gc()
setwd("/Users/negarvahdani/Deseq2")
dir.create("results", recursive = TRUE)


#load libraries
library(dplyr)
library(DESeq2)
library(biomaRt)
library(ggplot2)
library(ggrepel)
library(ComplexHeatmap)
library(clusterProfiler)
library(tibble)
library(tidyverse)
library(matrixStats)
library(readxl)
library(ggVennDiagram)
library(sva)

```

# Import the data and metadata from the paaper and pervious study

```{r}
#| label: import data
#| include: true

##import the data for meta-analysis and add edit the column names
count_elife <-
  read.delim("/Users/negarvahdani/elife_reverse_strand_gene_counts_inforemoved.txt",
             sep = "\t", stringsAsFactor = FALSE, header= TRUE,
             fill = TRUE, row.names = 1)
colnames(count_elife) <- 
  gsub("X.data.users.nvahdani.flow_project.meta.analysis.bamsort.", "",
       colnames(count_elife))
colnames(count_elife) <-sub(".sorted.bam", "", colnames(count_elife))
count_elife <- subset(count_elife, select = -End)
sample_names_elife <- paste0("cord_",seq(1,7)) # create column names
colnames(count_elife) <- sample_names_elife # assign the column names
colnames(count_elife) # check the column names
sample_name_elife_df <- data.frame(sample_name=colnames(count_elife)) # create a data frame with the column names

#load the metadata
metadata_combined <- read.csv("results/metadata_combined_elife.csv", 
                              row.names = 1) # available on github

#import the data from the flow study for further analysis
#import data
counts110_trimmed <-
  read.delim("/Users/negarvahdani/gene_counts_ref110_trimmed.txt",sep = "\t", 
             stringsAsFactor = FALSE, header= TRUE, fill = TRUE, row.names = 1)

#remove the columns and the rows of data containing sequencing information
counts110_trimmed_colremove <- counts110_trimmed %>% select(-c(1:5))

#remove the prefix and suffix of the the column name
colnames(counts110_trimmed_colremove) <-
  gsub("X.data.users.nvahdani.flow_project.bamsort110.output_trimmed.", "",
       colnames(counts110_trimmed_colremove))
colnames(counts110_trimmed_colremove) <-
  sub(".sorted.bam", "", colnames(counts110_trimmed_colremove))

#check the column names
colnames(counts110_trimmed_colremove)
head(counts110_trimmed_colremove)

```


# Bind the count tables and batch correct the data


```{r}
#| label: load_libraries
#| include: true

# find the rows that are not in both count tables and remove them
missing_rows <- rownames(count_elife)[!rownames(count_elife) %in%
                                        rownames(counts110_trimmed_colremove)] 
count_elife <- count_elife[!rownames(count_elife)%in% missing_rows,]

##bind the count tables and batch correct the data
counts_combined <- bind_cols(counts110_trimmed_colremove,count_elife)
identical(rownames(metadata_combined), colnames(counts_combined)) # check if the rownames of the metadata are the same as the column names of the counts
head(counts_combined)# check the head of the counts
class(counts_combined) # check the class of the counts
counts_combined <- as.matrix(counts_combined) # convert the counts to a matrix
counts_combined[is.na(counts_combined)] <- 0 # replace NAs with 0 for further analysis

# batch correct the counts using ComBat_seq function
batchcorrected_counts <- ComBat_seq(as.matrix(counts_combined),
                                    batch = metadata_combined$batch)  


```
# Make the Deseq2 object and filter the low expressed genes

```{r}
#| label: data processing and deseq2 analysis
#| include: true
#check for NAs
max(counts_combined[!is.na(counts_combined)])
sum(is.na(counts_combined))

#create the Deseq2 object
dds_combined <- DESeqDataSetFromMatrix(countData = batchcorrected_counts,
                                       colData = metadata_combined,
                                       design= ~ flow_time)

#remove the low expressed genes and check the no. of the removed columns
#set threshold and no. of samples
threshold <- 5
min_samples <- 3

#calculate the sum of counts across all samples for each gene
gene_counts <- rowSums(counts(dds_combined))

#create a logical vector indicating whether each gene meets the criteria
keep_genes <- gene_counts >= threshold

#subset the DESeqDataSet
dds_combined_filtered <- dds_combined[keep_genes,]

# check the batch correction
dds_combined_filtered_rlog <- rlog(dds_combined_filtered) 
boxplot(assay(dds_combined_filtered_rlog))

```
# PCA plot

```{r}
#| label: plot PCA
#| include: true
## PCA function
PCA <- function(mat,color_pca="",shape_pca= "", label_pca= "",
                save_plot= "no", name_of_plot= "PCA", comp1=1,
                comp2=2, pdf_width=12, pdf_height=12){
  #Get the differential expressed values from the comparrison interested,
  #extract the normalized values from the assay of vsd and plot them.
  #Giving condition and group from your design table
  
  #1. Extract the counts.
  dt <- mat
  
  #2. Perform pca
  pca_dt <- prcomp(t(dt))
  cat("PCA running...\n")
  # Sys.sleep(0.2)
  
  #3. Extract percentVar data.
  percentVar_dt <- pca_dt$sdev^2/sum(pca_dt$sdev^2)
  cat("Percents calculated...\n")
  # Sys.sleep(0.2)
  
  #4. Create the new dataframe to plot.
  dt_f <- data.frame(PC1=pca_dt$x[,comp1],
                     PC2=pca_dt$x[,comp2],
                     color_pca=color_pca,
                     shape_pca=shape_pca,
                     label_pca= label_pca)
  cat("Data frame built...\n")
  # Sys.sleep(0.2)
  
  #5. Plot it 
  cat("Plotting...\n")
  # Sys.sleep(0.2)
  print(save_plot)
  require(ggplot2)
  require(ggrepel)
  if (save_plot== "no") {
    pca_p <- ggplot(data = dt_f, aes_string(x = paste0("PC1"),
                                            y = paste0("PC2"),
                                            color = "color_pca", 
                                            shape= "shape_pca",
                                            label="label_pca")) +
      geom_point(size = 5) +
      geom_text_repel(size= 3, max.overlaps = 50, 
                      box.padding   = 1.5,point.padding = 0.5,force = 50)+
      xlab(paste0("PC", comp1,": ", 
                  round(percentVar_dt[comp1] * 100), "% variance")) +
      ylab(paste0("PC",comp2,": ",
                  round(percentVar_dt[comp2] * 100), "% variance")) +
      # coord_fixed()+ 
      NULL
  }
  if (save_plot== "yes"){
    
    cat("Saving plot as: ",paste0(name_of_plot,"...\n"))
    pca_p <- ggplot(data = dt_f, aes_string(x = paste0("PC",comp1),
                                            y = paste0("PC",comp2),
                                            color = "color_pca", 
                                            shape= "shape_pca",
                                            label="label_pca")) +
      geom_text_repel(size= 3, max.overlaps = 50, 
                      box.padding   = 1.5,
                      point.padding = 0.5,force = 50)+
      geom_point(size = 5) +
      xlab(paste0("PC", comp1,": ", round(percentVar_dt[comp1] * 100),
                  "% variance")) +
      ylab(paste0("PC",comp2,": ", round(percentVar_dt[comp2] * 100),
                  "% variance")) +
      # coord_fixed()+ 
      NULL
    print(pca_p)
    dev.copy(pdf, paste0(name_of_plot,".pdf"),
             width = pdf_width,height = pdf_height)
    dev.off()
  }
  # Sys.sleep(0.2)
  cat("Done")
  print(pca_p)
  
  #return(pca_p)
}

PCA(assay(dds_combined_filtered_rlog),
    color_pca = factor(metadata_combined$flow_profile), 
    shape_pca = factor(metadata_combined$batch),
    save_plot = "no",
    name_of_plot = "PCA_counts_corrected_flow_profile_rlog_afterfiltering")

```
# Run Deseq2 analysis
```{r}
#| label: run deseq2 analysis and shrink log fold changes using ashr method
#| include: true

## run DESeq2 analysis
dds_combined_filtered <- DESeq(dds_combined_filtered) 

#run DEGs, compare in vivo data with tilter and pump in 2 time points. Convert the results into data frame and add the gene ids to rownames 
##tilter 4h vs cord
res_tilter4_cord <- lfcShrink(dds_combined_filtered,
                              parallel = TRUE,
                              contrast=c("flow_time",
                                         "bidirectional_4","in_vivo_in_vivo"),
                              type="ashr")
res_tilter4_cord <- as.data.frame(res_tilter4_cord) 
head(res_tilter4_cord)
res_tilter4_cord$ensembl_gene_id <- rownames(res_tilter4_cord)

##tilter 24h vs cord
res_tilter24_cord <- lfcShrink(dds_combined_filtered,
                               parallel = TRUE,
                               contrast=c("flow_time", "bidirectional_24",
                                          "in_vivo_in_vivo"), type="ashr")
res_tilter24_cord <- as.data.frame(res_tilter24_cord)
head(res_tilter24_cord)
res_tilter24_cord$ensembl_gene_id <- rownames(res_tilter24_cord)

##pump 4h vs cord
res_pump4_cord <- lfcShrink(dds_combined_filtered,
                            parallel = TRUE,
                            contrast=c("flow_time", "unidirectional_4",
                                       "in_vivo_in_vivo"), type="ashr")
res_pump4_cord <- as.data.frame(res_pump4_cord)
head(res_pump4_cord)
res_pump4_cord$ensembl_gene_id <- rownames(res_pump4_cord)


##pump 24h vs cord
res_pump24_cord <- lfcShrink(dds_combined_filtered,
                             parallel = TRUE,
                             contrast=c("flow_time", "unidirectional_24",
                                        "in_vivo_in_vivo"), type="ashr")
res_pump24_cord <- as.data.frame(res_pump24_cord)
head(res_pump24_cord)
res_pump24_cord$ensembl_gene_id <- rownames(res_pump24_cord)


#check for duplicates
table(duplicated(res_tilter4_cord$column1))
table(duplicated(res_tilter24_cord$column1))
table(duplicated(res_pump4_cord$column1))
table(duplicated(res_pump24_cord$column1)) 


```
# Add ENSMBL gene ids to the result tables

```{r}
#| label: convert gene ids to names using biomart amd merge to DEGs tables
#| include: true

# convert gene ids to names using biomart
symbol_to_ensmbl_human <- function() {
  require(biomaRt) # load biomaRt package
  ensembl <- useMart(biomart = "ensembl", dataset = "hsapiens_gene_ensembl") 
  # use the main Ensembl mart host
  # query biomart
  annotations <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol"),
                       mart = ensembl) 
  # get the ensembl gene id and the hgnc symbol
  return(annotations) # return the results
}

gene_id <- symbol_to_ensmbl_human() # get the gene ids
gene_id_df <- as.data.frame(gene_id) # convert the gene ids to a data frame
head(gene_id_df) # check the head of the data frame

##merge the ensembl gene id to the data frame
res_tilter4_cord <- merge(res_tilter4_cord, gene_id_df,
                          by.x = "ensembl_gene_id",all.x=TRUE)
res_tilter24_cord <- merge(res_tilter24_cord, gene_id_df,
                           by.x = "ensembl_gene_id",all.x=TRUE)
res_pump4_cord <- merge(res_pump4_cord, gene_id_df,
                        by.x = "ensembl_gene_id",all.x=TRUE)
res_pump24_cord <- merge(res_pump24_cord, gene_id_df,
                         by.x = "ensembl_gene_id",all.x=TRUE)
## remove NAs
res_tilter4_cord$padj[is.na(res_tilter4_cord$padj)] <- 1
res_tilter24_cord$padj[is.na(res_tilter24_cord$padj)] <- 1
res_pump4_cord$padj[is.na(res_pump4_cord$padj)] <- 1
res_pump24_cord$padj[is.na(res_pump24_cord$padj)] <- 1
```


# Export the DEGs with padj < 0.05
```{r}
#| label: save the save the DEGs with padj < 0.05
#| include: true

res_tilter4_cord_padj0.05 <- subset(res_tilter4_cord, padj < 0.05)
res_tilter24_cord_padj0.05 <- subset(res_tilter24_cord, padj < 0.05)
head(res_tilter4_cord_padj0.05)
head(res_tilter24_cord_padj0.05)
write.csv(as.data.frame(res_tilter4_cord_padj0.05),
          file="tilter_4_cord_0.05.csv")
write.csv(as.data.frame(res_tilter24_cord_padj0.05),
          file="tilter_24_cord_0.05.csv")


res_pump4_cord_padj0.05 <- subset(res_pump4_cord, padj < 0.05)
res_pump24_cord_padj0.05 <- subset(res_pump24_cord, padj < 0.05)
head(res_pump4_cord_padj0.05)
head(res_pump24_cord_padj0.05)
write.csv(as.data.frame(res_pump4_cord_padj0.05),
          file="pump_4_cord_0.05.csv")
write.csv(as.data.frame(res_pump24_cord_padj0.05),
          file="pump_24_cord_0.05.csv")


```
# Make venn diagram between the two comparisons

```{r}
#| label: Make venn diagram between the significant genes in the two comparisons
#| include: true
#| 
venn_list <- list(Pump_24h=res_pump24_cord_padj0.05$ensembl_gene_id,
                    Tilter_24h=res_tilter24_cord_padj0.05$ensembl_gene_id
                    
) # create a list of the gene ids


plot <- ggVennDiagram(venn_list,     label_size = 5,
                      # set_size=8    
) +
  scale_fill_viridis_c(option = "magma", direction = -1) +
  theme(plot.title = element_text(hjust = 0.2)) # change the title position
print(plot)

```
